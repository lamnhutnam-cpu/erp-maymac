/* ===================================================================
   ERP MAY M·∫∂C ‚Äì SPA Frontend (v2.3)
   - Customers CRUD
   - Debts: t·ªïng h·ª£p + s·ªï c√°i theo kh√°ch
   - Inventory: t·ªìn kho + nh·∫≠p/xu·∫•t/ƒëi·ªÅu ch·ªânh & nh·∫≠t k√Ω
   - Orders: gi·ªØ nh∆∞ phi√™n b·∫£n tr∆∞·ªõc (NoCu + nhi·ªÅu payments)
=================================================================== */

const API_URL = "/.netlify/functions/gas";

/* =============== HELPERS =============== */
const $  = (s, el = document) => el.querySelector(s);
const $$ = (s, el = document) => Array.from(el.querySelectorAll(s));
const appEl   = () => $("#app");
const shellEl = () => $("#dashboard-shell");

const fmtVND = (n) => (Number(n || 0)).toLocaleString("vi-VN") + " VND";
const todayStr = () => {
  const d = new Date();
  const y = d.getFullYear();
  const m = String(d.getMonth() + 1).padStart(2, "0");
  const dd = String(d.getDate()).padStart(2, "0");
  return `${y}/${m}/${dd}`;
};
const toObjects = (headers, rows) => rows.map(r => {
  const o = {}; headers.forEach((h, i) => (o[h] = r[i])); return o;
});
function renderTableArray(headers, data) {
  if (!data?.length) return `<div class="muted">‚Äî</div>`;
  let html = `<table><thead><tr>${headers.map(h=>`<th>${h}</th>`).join("")}</tr></thead><tbody>`;
  data.forEach(row => {
    html += `<tr>${headers.map(h=>{
      const right = /SL|S·ªë l∆∞·ª£ng|ƒê∆°n gi√°|Th√†nh ti·ªÅn|T·ªïng|Ton|Gia|Amount|Qty|N·ª£|Tr·∫£|Debt|VND/i.test(h) ? ' class="right"' : "";
      return `<td${right}>${row[h] ?? ""}</td>`;
    }).join("")}</tr>`;
  });
  html += `</tbody></table>`;
  return html;
}

/* =============== API =============== */
async function apiGet(sheet) {
  const res = await fetch(`${API_URL}?sheet=${encodeURIComponent(sheet)}`);
  return res.json();
}
async function apiPost(body) {
  const res = await fetch(API_URL, {
    method: "POST",
    headers: { "Content-Type": "application/json; charset=utf-8" },
    body: JSON.stringify(body),
  });
  return res.json();
}
async function getDebt(khach) {
  try { const r = await apiPost({ action: "getDebt", khach }); return r?.ok ? Number(r.debt || 0) : 0; }
  catch { return 0; }
}

/* =============== OFFLINE QUEUE =============== */
const SYNC_KEY = "erp_sync_queue_v2";
const getQueue = () => JSON.parse(localStorage.getItem(SYNC_KEY) || "[]");
const setQueue = (q) => localStorage.setItem(SYNC_KEY, JSON.stringify(q));
function toast(msg, type="info") {
  const t = document.createElement("div");
  Object.assign(t.style, {
    position:"fixed", right:"16px", bottom:"16px",
    background: type==="error"?"#d9534f": type==="success"?"#28a745":"#111",
    color:"#fff", padding:"10px 12px", borderRadius:"10px",
    boxShadow:"0 8px 22px rgba(0,0,0,.25)", zIndex:9999, fontSize:"14px"
  });
  t.textContent = msg; document.body.appendChild(t);
  setTimeout(()=> t.remove(), 2200);
}
async function safePost(body) {
  try {
    const r = await apiPost(body);
    if (!r.ok) throw new Error(r.error || "API error");
    return r;
  } catch (e) {
    const q = getQueue(); q.push({ body, ts: Date.now() }); setQueue(q);
    toast("üîå M·∫•t m·∫°ng ‚Äì ƒë√£ x·∫øp y√™u c·∫ßu v√†o h√†ng ƒë·ª£i", "info");
    return { ok:false, queued:true };
  }
}
setInterval(async () => {
  const q = getQueue(); if (!q.length) return;
  try {
    const r = await apiPost(q[0].body);
    if (r.ok) { q.shift(); setQueue(q); toast("‚úÖ ƒê·ªìng b·ªô th√†nh c√¥ng", "success"); }
  } catch {}
}, 5000);

/* =============== STATE & LOADERS =============== */
const state = {
  products: [],
  orders: [],
  customers: [],
  orderLines: [],
  payments: [],
  inventory: [],
  invLog: [],
  cacheAt: 0,
};
const CACHE_TTL = 60 * 1000;

async function loadProducts(invalidate=false) {
  const now = Date.now();
  if (!invalidate && state.products.length && now-state.cacheAt<CACHE_TTL) return;
  const rs = await apiGet("SanPham"); const rows = rs.ok?rs.rows:[];
  if (!rows?.length) { state.products=[]; return; }
  const h = rows[0];
  state.products = toObjects(h, rows.slice(1)).map(o => ({
    "M√£ SP": o["MaSP"] || o["M√£ SP"] || "",
    "T√™n s·∫£n ph·∫©m": o["TenSP"] || o["T√™n s·∫£n ph·∫©m"] || "",
    "Size": o["Size"] || "",
    "Gi√°": Number(o["Gia"] || o["Gi√°"] || 0),
  }));
  state.cacheAt = now;
}
async function loadCustomers() {
  const rs = await apiGet("KhachHang"); const rows = rs.ok?rs.rows:[];
  state.customers = rows?.length ? rows.slice(1).map(r=>({
    ma:r[0], ten:r[1], loai:r[2]||"", sdt:r[3]||"", email:r[4]||"", diachi:r[5]||"", ghichu:r[6]||""
  })) : [];
}
async function loadOrders(invalidate=false) {
  const now = Date.now();
  if (!invalidate && state.orders.length && now-state.cacheAt<CACHE_TTL) return;
  const rs = await apiGet("DonHang"); const rows = rs.ok?rs.rows:[];
  if (!rows?.length) { state.orders=[]; return; }
  const h = rows[0];
  state.orders = toObjects(h, rows.slice(1)).map(o => ({
    ma:o["MaDon"]||o["M√£ ƒë∆°n"]||"",
    khach:o["KhachHang"]||o["Kh√°ch h√†ng"]||"",
    ngay:o["NgayTao"]||o["Ng√†y t·∫°o"]||"",
    tong:Number(o["TongTien"]||o["T·ªïng ti·ªÅn"]||0),
    paid:Number(o["KhachTra"]||o["Kh√°ch tr·∫£"]||0),
    nocu:Number(o["NoCu"]||o["N·ª£ c≈©"]||0),
    debt_after:Number(o["ConNo"]||o["C√≤n n·ª£"]||0),
    note:o["GhiChu"]||o["Ghi ch√∫"]||""
  }));
  state.cacheAt = now;
}
async function loadOrderDetails(ma) {
  const rs = await apiGet("ChiTietDonHang"); const rows = rs.ok?rs.rows:[];
  if (!rows?.length) return [];
  const h = rows[0];
  return toObjects(h, rows.slice(1))
    .map(o=>({
      ma:o["MaDon"]||o["M√£ ƒë∆°n"]||"",
      ten:o["TenSP"]||o["T√™n s·∫£n ph·∫©m"]||"",
      so_luong:Number(o["SL"]||o["S·ªë l∆∞·ª£ng"]||0),
      don_gia:Number(o["DonGia"]||o["ƒê∆°n gi√°"]||0),
      thanh_tien:Number(o["ThanhTien"]||o["Th√†nh ti·ªÅn"]||0),
    }))
    .filter(x=>x.ma===ma);
}
async function loadPaymentsByOrder(ma){
  const rs=await apiGet("CongNo"); const rows=rs.ok?rs.rows:[]; if(!rows?.length) return [];
  const h=rows[0]; const idx={Loai:h.indexOf("Loai")>-1?h.indexOf("Loai"):h.indexOf("Lo·∫°i"), SoTien:h.indexOf("SoTien")>-1?h.indexOf("SoTien"):h.indexOf("S·ªë ti·ªÅn"), GhiChu:h.indexOf("GhiChu")>-1?h.indexOf("GhiChu"):h.indexOf("Ghi ch√∫"), MaDon:h.indexOf("MaDon")>-1?h.indexOf("MaDon"):h.indexOf("M√£ ƒë∆°n")};
  return rows.slice(1).filter(r=>String(r[idx.MaDon]||"")===ma && String(r[idx.Loai]||"")==="TT")
    .map(r=>({ "S·ªë ti·ªÅn":fmtVND(r[idx.SoTien]||0), "Ghi ch√∫":r[idx.GhiChu]||"" }));
}

/* Inventory loaders */
async function loadInventory() {
  const rs = await safePost({ action:"invList" });
  if (!rs.ok) { state.inventory=[]; return; }
  const rows = rs.rows || [];
  if (!rows.length) { state.inventory=[]; return; }
  const h = rows[0];
  state.inventory = toObjects(h, rows.slice(1)).map(o => ({
    MaSP:o["MaSP"]||"", TenSP:o["TenSP"]||"", Size:o["Size"]||"", Ton:Number(o["Ton"]||0), GhiChu:o["GhiChu"]||""
  }));
}
async function syncInventoryFromProducts(){
  const rs = await safePost({ action:"invSyncFromProducts" });
  return rs.ok ? rs.created : -1;
}

/* =============== LAYOUT TOGGLE =============== */
function toggleShell(showShell) {
  const sh = shellEl(), app = appEl(); if (!sh || !app) return;
  sh.classList.toggle("hidden", !showShell);
  app.classList.toggle("hidden", showShell);
  if (!showShell) window.scrollTo({ top:0, behavior:"smooth" });
}

/* =============== PAGES =============== */
// Dashboard
async function pageOverview() { appEl().innerHTML = ""; }

/* ---- Customers (create / update / delete) ---- */
async function pageCustomers() {
  toggleShell(false);

  appEl().innerHTML = `
    <div class="page-head"><h1>Qu·∫£n l√Ω Kh√°ch h√†ng</h1></div>
    <div class="card">
      <div class="quick-3">
        <button class="quick big" id="kh-add"><div class="q-icon">üë•‚ûï</div><div>Th√™m kh√°ch h√†ng</div></button>
        <div class="quick big"><div class="q-icon">üîé</div><div><input id="kh-search" class="search w-full" placeholder="T√¨m t√™n, SƒêT, email..."></div></div>
        <button class="quick big" id="kh-export"><div class="q-icon">üìä</div><div>Xu·∫•t b√°o c√°o</div></button>
      </div>
    </div>
    <div class="card"><div class="list-head"><h3 id="kh-count">Danh s√°ch Kh√°ch h√†ng</h3></div><div id="kh-list" class="kh-list"></div></div>

    <div id="kh-modal" class="modal hidden">
      <div class="modal-body">
        <h3 id="kh-title">‚ûï Th√™m kh√°ch h√†ng</h3>
        <input type="hidden" id="m-ma">
        <div class="row">
          <div class="col"><label>T√™n <span class="req">*</span></label><input id="m-ten"></div>
          <div class="col"><label>Lo·∫°i <span class="req">*</span></label>
            <select id="m-loai"><option value="">Ch·ªçn</option><option>C√° nh√¢n</option><option>Doanh nghi·ªáp</option><option>Kh√°c</option></select>
          </div>
        </div>
        <div class="row">
          <div class="col"><label>SƒêT <span class="req">*</span></label><input id="m-sdt"></div>
          <div class="col"><label>Email</label><input id="m-email"></div>
        </div>
        <div><label>ƒê·ªãa ch·ªâ</label><input id="m-diachi"></div>
        <div><label>Ghi ch√∫</label><textarea id="m-ghichu" rows="3"></textarea></div>
        <div class="right" style="margin-top:12px;display:flex;gap:8px;justify-content:flex-end">
          <button class="btn" id="m-cancel">H·ªßy</button>
          <button class="btn primary" id="m-save">L∆∞u</button>
        </div>
      </div>
    </div>
  `;

  const modal = $("#kh-modal");
  const openModal = ()=> modal.classList.remove("hidden");
  const closeModal = ()=> modal.classList.add("hidden");
  const f = { ma:$("#m-ma"), ten:$("#m-ten"), loai:$("#m-loai"), sdt:$("#m-sdt"), email:$("#m-email"), diachi:$("#m-diachi"), ghichu:$("#m-ghichu"), title:$("#kh-title"), save:$("#m-save"), cancel:$("#m-cancel") };
  let mode = "create";
  const initials = name => (String(name||"").split(" ").filter(Boolean).slice(-2).map(s=>s[0]).join("").toUpperCase()) || "KH";

  await loadCustomers(); render("");

  function render(keyword="") {
    const k = keyword.toLowerCase();
    const list = k ? state.customers.filter(x =>
      (x.ten||"").toLowerCase().includes(k) ||
      (x.sdt||"").toLowerCase().includes(k) ||
      (x.email||"").toLowerCase().includes(k)
    ) : state.customers;

    $("#kh-count").textContent = `Danh s√°ch Kh√°ch h√†ng (${list.length})`;
    if (!list.length) { $("#kh-list").innerHTML = `<div class="muted">Ch∆∞a c√≥ d·ªØ li·ªáu</div>`; return; }

    $("#kh-list").innerHTML = list.map(x => `
      <div class="kh-card" data-item="${x.ma}">
        <div class="kh-left">
          <div class="avatar">${initials(x.ten)}</div>
          <div class="kh-info">
            <div class="kh-name">${x.ten} <span class="muted">(${x.ma})</span> ${x.loai?`<span class="badge gray">${x.loai}</span>`:""}</div>
            <div class="kh-line">
              ${x.sdt?`<span>üìû ${x.sdt}</span>`:""}
              ${x.email?`<span>‚úâÔ∏è ${x.email}</span>`:""}
              ${x.diachi?`<span>üìç ${x.diachi}</span>`:""}
            </div>
          </div>
        </div>
        <div class="kh-right">
          <div class="kh-actions">
            <button class="btn sm info" data-act="detail" data-id="${x.ma}">Chi ti·∫øt</button>
            <button class="btn sm primary" data-act="edit" data-id="${x.ma}">S·ª≠a</button>
            <button class="btn sm danger" data-act="delete" data-id="${x.ma}">X√≥a</button>
          </div>
        </div>
      </div>
    `).join("");
  }

  $("#kh-search").oninput = e => render(e.target.value || "");
  $("#kh-export").onclick = () => alert("Xu·∫•t tr·ª±c ti·∫øp t·ª´ Google Sheets (b·ªï sung sau).");

  $("#kh-add").onclick = () => {
    mode = "create";
    f.title.textContent = "‚ûï Th√™m kh√°ch h√†ng";
    f.save.textContent  = "Th√™m kh√°ch h√†ng";
    f.ma.value = f.ten.value = f.loai.value = f.sdt.value = f.email.value = f.diachi.value = f.ghichu.value = "";
    openModal();
  };
  f.cancel.onclick = closeModal;

  f.save.onclick = async () => {
    const payload = { ten:f.ten.value.trim(), loai:f.loai.value.trim(), sdt:f.sdt.value.trim(), email:f.email.value.trim(), diachi:f.diachi.value.trim(), ghichu:f.ghichu.value.trim() };
    if (!payload.ten)  return alert("Vui l√≤ng nh·∫≠p T√™n");
    if (!payload.loai) return alert("Vui l√≤ng ch·ªçn Lo·∫°i");
    if (!payload.sdt)  return alert("Vui l√≤ng nh·∫≠p SƒêT");

    let rs;
    if (mode==="create") rs = await safePost({ action:"createCustomer", data: payload });
    else rs = await safePost({ action:"updateCustomer", data:{ ma:f.ma.value, ...payload }});

    if (!rs.ok && !rs.queued) return alert(rs.error || "L·ªói l∆∞u");
    closeModal(); await loadCustomers(); render($("#kh-search").value || "");
    toast(mode==="create" ? (rs.ok?`ƒê√£ t·∫°o KH ${rs.ma_kh||""}`:"ƒê√£ l∆∞u ch·ªù") : (rs.ok?"ƒê√£ c·∫≠p nh·∫≠t":"ƒê√£ l∆∞u ch·ªù"), "success");
  };

  document.addEventListener("click", async (ev) => {
    const b = ev.target.closest(".kh-actions .btn");
    if (!b || !$("#kh-list").contains(b)) return;
    const id = b.dataset.id;
    const row = state.customers.find(x=>x.ma===id);
    const act = b.dataset.act;

    if (act==="detail") {
      // k√®m n·ª£ hi·ªán t·∫°i
      const debt = await getDebt(row.ten);
      alert(`M√£: ${row.ma}
T√™n: ${row.ten}
Lo·∫°i: ${row.loai}
SƒêT: ${row.sdt}
Email: ${row.email}
ƒê·ªãa ch·ªâ: ${row.diachi}
Ghi ch√∫: ${row.ghichu}
C√¥ng n·ª£ hi·ªán t·∫°i: ${fmtVND(debt)}`);
    }
    if (act==="edit") {
      mode="edit";
      f.title.textContent="‚úèÔ∏è S·ª≠a kh√°ch h√†ng"; f.save.textContent="C·∫≠p nh·∫≠t";
      f.ma.value=row.ma; f.ten.value=row.ten; f.loai.value=row.loai; f.sdt.value=row.sdt; f.email.value=row.email; f.diachi.value=row.diachi; f.ghichu.value=row.ghichu;
      openModal();
    }
    if (act==="delete") {
      if (!confirm(`X√≥a kh√°ch h√†ng ${row.ten} (${row.ma})?`)) return;
      const rs = await safePost({ action:"deleteCustomer", data:{ ma:row.ma }});
      if (!rs.ok && !rs.queued) return alert(rs.error || "Kh√¥ng x√≥a ƒë∆∞·ª£c");
      await loadCustomers(); render($("#kh-search").value || ""); toast(rs.ok?"ƒê√£ x√≥a":"ƒê√£ x·∫øp h√†ng ƒë·ª£i", "success");
    }
  });
}

/* ---- Debts (C√¥ng n·ª£) ---- */
async function pageDebts(){
  toggleShell(false);
  appEl().innerHTML = `
    <div class="card">
      <h2>üí≥ C√¥ng n·ª£</h2>
      <div class="row">
        <div class="col"><label>T√¨m kh√°ch</label><input id="debt-kh" placeholder="Nh·∫≠p ƒë√∫ng t√™n KH (gi·ªëng trong h·ªá th·ªëng)"></div>
        <div class="col" style="display:flex;align-items:flex-end;gap:8px">
          <button class="primary" id="btn-debt-ledger">Xem s·ªï c√°i</button>
          <button id="btn-debt-summary">T·ªïng h·ª£p</button>
        </div>
      </div>
    </div>
    <div class="card"><h3>üìå K·∫øt qu·∫£</h3><div id="debt-result">‚Äî</div></div>
  `;

  $("#btn-debt-summary").onclick = async () => {
    const rs = await safePost({ action:"reportDebtSummary" });
    if (!rs.ok) { $("#debt-result").innerHTML="‚ö†Ô∏è Kh√¥ng t·∫£i ƒë∆∞·ª£c."; return; }
    const rows = (rs.rows||[]).map(x=>({ "Kh√°ch h√†ng":x.KhachHang, "C√¥ng n·ª£": fmtVND(x.Debt)}));
    $("#debt-result").innerHTML = renderTableArray(["Kh√°ch h√†ng","C√¥ng n·ª£"], rows) +
      `<div class="right" style="margin-top:8px">T·ªïng c√¥ng n·ª£: <b>${fmtVND(rs.total||0)}</b></div>`;
  };

  $("#btn-debt-ledger").onclick = async () => {
    const kh = $("#debt-kh").value.trim();
    if (!kh) return alert("Nh·∫≠p t√™n kh√°ch");
    const rs = await safePost({ action:"getLedger", khach: kh });
    if (!rs.ok) { $("#debt-result").innerHTML="‚ö†Ô∏è Kh√¥ng t·∫£i ƒë∆∞·ª£c."; return; }
    const rows = (rs.timeline||[]).map(x=>({
      "Ng√†y":x.Ngay, "Lo·∫°i":x.Loai, "S·ªë ti·ªÅn":fmtVND(x.SoTien), "Bi·∫øn ƒë·ªông":fmtVND(x.BienDong), "S·ªë d∆∞":fmtVND(x.SoDu), "M√£ ƒë∆°n":x.MaDon||""
    }));
    $("#debt-result").innerHTML = `<div class="muted">Kh√°ch: <b>${kh}</b> ‚Äî S·ªë d∆∞ hi·ªán t·∫°i: <b>${fmtVND(rs.debt||0)}</b></div>` +
      renderTableArray(["Ng√†y","Lo·∫°i","S·ªë ti·ªÅn","Bi·∫øn ƒë·ªông","S·ªë d∆∞","M√£ ƒë∆°n"], rows);
  };
}

/* ---- Inventory (Kho h√†ng) ---- */
async function pageInventory(){
  toggleShell(false);
  appEl().innerHTML = `
    <div class="card">
      <h2>üì¶ Kho h√†ng</h2>
      <div class="row">
        <div class="col"><label>T√¨m ki·∫øm</label><input id="inv-search" placeholder="T√™n SP/Size..."></div>
        <div class="col" style="display:flex;align-items:flex-end;gap:8px">
          <button class="primary" id="inv-sync">ƒê·ªìng b·ªô t·ª´ S·∫£n ph·∫©m</button>
          <button id="inv-reload">üîÑ Refresh</button>
        </div>
      </div>
    </div>

    <div class="card">
      <div class="list-head"><h3>T·ªìn kho</h3></div>
      <div id="inv-table">ƒêang t·∫£i...</div>
    </div>

    <div class="card">
      <h3>‚ûï Nh·∫≠p/Xu·∫•t/ƒêi·ªÅu ch·ªânh</h3>
      <div class="row">
        <div class="col"><label>T√™n SP</label><input id="adj-ten"></div>
        <div class="col"><label>Size</label><input id="adj-size"></div>
      </div>
      <div class="row">
        <div class="col"><label>Lo·∫°i</label>
          <select id="adj-type">
            <option>NHAP</option><option>XUAT</option><option>DIEUCHINH+</option><option>DIEUCHINH-</option>
          </select>
        </div>
        <div class="col"><label>S·ªë l∆∞·ª£ng</label><input id="adj-sl" type="number" value="1"></div>
      </div>
      <div class="row">
        <div class="col"><label>Ghi ch√∫</label><input id="adj-note" placeholder="phi·∫øu nh·∫≠p/xu·∫•t..."></div>
        <div class="col" style="display:flex;align-items:flex-end"><button class="primary" id="adj-save">Ghi</button></div>
      </div>
    </div>
  `;

  const render = (kw="") => {
    const q = kw.toLowerCase();
    const list = q ? state.inventory.filter(x =>
      (x.TenSP||"").toLowerCase().includes(q) || (x.Size||"").toLowerCase().includes(q)
    ) : state.inventory;
    const rows = list.map(x=>({ "M√£ SP":x.MaSP||"", "T√™n SP":x.TenSP, "Size":x.Size, "T·ªìn":x.Ton, "Ghi ch√∫":x.GhiChu||"" }));
    $("#inv-table").innerHTML = renderTableArray(["M√£ SP","T√™n SP","Size","T·ªìn","Ghi ch√∫"], rows);
  };

  $("#inv-search").oninput = (e)=>render(e.target.value||"");
  $("#inv-reload").onclick = async ()=>{ await loadInventory(); render($("#inv-search").value||""); };
  $("#inv-sync").onclick = async ()=>{
    const created = await syncInventoryFromProducts();
    if (created>=0) { toast(`ƒê√£ ƒë·ªìng b·ªô ${created} d√≤ng`, "success"); await loadInventory(); render($("#inv-search").value||""); }
    else alert("Kh√¥ng ƒë·ªìng b·ªô ƒë∆∞·ª£c.");
  };
  $("#adj-save").onclick = async ()=>{
    const data = {
      TenSP: $("#adj-ten").value.trim(),
      Size:  $("#adj-size").value.trim(),
      Loai:  $("#adj-type").value,
      SL:    Number($("#adj-sl").value||0),
      GhiChu:$("#adj-note").value.trim(),
    };
    if (!data.TenSP || !data.Size || !data.SL) return alert("ƒêi·ªÅn ƒë·ªß T√™n/Size/SL");
    const rs = await safePost({ action:"invAdjust", data });
    if (!rs.ok && !rs.queued) return alert(rs.error || "Ghi kho th·∫•t b·∫°i");
    toast(rs.ok?`T·ªìn m·ªõi: ${rs.ton}`:"ƒê√£ l∆∞u ch·ªù", "success");
    await loadInventory(); render($("#inv-search").value||"");
  };

  await loadInventory(); render();
}

/* ---- Product (gi·ªØ nguy√™n CRUD ƒë∆°n gi·∫£n) ---- */
async function pageProduct() {
  toggleShell(false);

  appEl().innerHTML = `
    <div class="card">
      <h2>üì¶ S·∫£n ph·∫©m</h2>
      <div class="row">
        <div class="col"><label>T√™n</label><input id="sp-ten"></div>
        <div class="col"><label>Size</label><input id="sp-size" placeholder="S/M/L/XL"></div>
      </div>
      <div class="row">
        <div class="col"><label>Gi√° (VND)</label><input id="sp-gia" type="number" value="0"></div>
        <div class="col" style="display:flex;align-items:flex-end"><button class="primary" id="btn-add-sp">üíæ L∆∞u s·∫£n ph·∫©m</button></div>
      </div>
    </div>
    <div class="card"><h3>üìã Danh s√°ch s·∫£n ph·∫©m</h3><div id="sp-list">ƒêang t·∫£i...</div></div>
  `;

  $("#btn-add-sp").onclick = async () => {
    const ten  = $("#sp-ten").value.trim();
    const size = $("#sp-size").value.trim();
    const gia  = Number($("#sp-gia").value || 0);
    if (!ten || !size || gia<=0) return alert("Thi·∫øu th√¥ng tin");
    const rs = await safePost({ action:"createProduct", data:{ ten, size, gia }});
    if (rs.ok) { toast("ƒê√£ l∆∞u!", "success"); await loadProducts(true); renderList(); $("#sp-ten").value=$("#sp-size").value=""; $("#sp-gia").value=0; }
  };

  await loadProducts(); renderList();
  function renderList() {
    $("#sp-list").innerHTML = renderTableArray(["M√£ SP","T√™n s·∫£n ph·∫©m","Size","Gi√°"], state.products);
  }
}

/* ---- Order (create) ‚Äî c√≥ c√¥ng n·ª£ & nhi·ªÅu d√≤ng KH√ÅCH TR·∫¢ ---- */
async function pageOrder() {
  toggleShell(false);

  appEl().innerHTML = `
    <div class="card">
      <h2>üßæ T·∫°o ƒë∆°n h√†ng</h2>
      <div class="row">
        <div class="col"><label>Kh√°ch h√†ng</label><input id="dh-khach" placeholder="T√™n KH"></div>
        <div class="col"><label>Ng√†y</label><input id="dh-ngay" value="${todayStr()}"></div>
      </div>

      <div class="row">
        <div class="col"><label>S·∫£n ph·∫©m</label><select id="dh-sp"></select></div>
        <div class="col"><label>S·ªë l∆∞·ª£ng</label><input id="dh-sl" type="number" value="1"></div>
      </div>
      <div class="row">
        <div class="col"><label>ƒê∆°n gi√°</label><input id="dh-gia" type="number" value="0"></div>
        <div class="col" style="display:flex;align-items:flex-end;gap:8px">
          <button class="primary" id="btn-add-line">‚ûï Th√™m v√†o ƒë∆°n</button>
          <button class="danger" id="btn-clear-lines">üóë Xo√°</button>
        </div>
      </div>
    </div>

    <div class="card">
      <h3>üìã S·∫£n ph·∫©m trong ƒë∆°n</h3>
      <div id="dh-lines">Ch∆∞a c√≥ d√≤ng</div>

      <div class="subcard" style="margin-top:12px">
        <div style="display:flex;align-items:center;justify-content:space-between">
          <h3>üíµ Kh√°ch tr·∫£ (nhi·ªÅu d√≤ng)</h3>
          <button class="primary" id="btn-add-pay">+ Th√™m d√≤ng</button>
        </div>
        <div id="pay-rows" style="margin-top:8px"></div>
      </div>

      <div class="row" style="margin-top:10px">
        <div class="col"><label>Ghi ch√∫</label><input id="dh-note" placeholder="ghi ch√∫..."></div>
        <div class="col"></div>
      </div>

      <div style="margin-top:10px; display:grid; grid-template-columns: 1fr 1fr; gap: 8px;">
        <div class="muted">üßÆ T·ªïng t·∫°m t√≠nh: <b id="dh-sum">0 VND</b></div>
        <div class="muted right">üì¶ N·ª£ c≈©: <b id="dh-old-debt">0 VND</b></div>
        <div class="muted">üíµ T·ªïng kh√°ch tr·∫£: <b id="dh-paid-show">0 VND</b></div>
        <div class="muted right">üßæ C√≤n n·ª£ sau Hƒê: <b id="dh-debt-after">0 VND</b></div>
      </div>

      <div style="margin-top:10px"><button class="primary" id="btn-save-order" disabled>‚úÖ L∆∞u ƒë∆°n</button></div>
    </div>
  `;

  await loadProducts();
  const sel = $("#dh-sp");
  sel.innerHTML = (state.products||[]).map(p =>
    `<option value="${p["T√™n s·∫£n ph·∫©m"]}" data-gia="${p["Gi√°"]}">${p["T√™n s·∫£n ph·∫©m"]} ‚Äî ${fmtVND(p["Gi√°"])}</option>`
  ).join("");
  const syncPrice = () => { $("#dh-gia").value = sel.selectedOptions[0]?.getAttribute("data-gia") || 0; };
  syncPrice(); sel.onchange = syncPrice;

  let oldDebt = 0; state.orderLines=[]; state.payments=[];

  async function refreshDebt() {
    const kh = $("#dh-khach").value.trim();
    oldDebt = kh ? await getDebt(kh) : 0;
    updateTotals();
  }
  $("#dh-khach").addEventListener("change", refreshDebt);
  $("#dh-khach").addEventListener("blur", refreshDebt);

  $("#btn-add-line").onclick = () => {
    const ten = $("#dh-sp").value;
    const sl  = Number($("#dh-sl").value || 0);
    const gia = Number($("#dh-gia").value || 0);
    if (!ten || sl<=0 || gia<=0) return;
    state.orderLines.push({ "T√™n":ten, "S·ªë l∆∞·ª£ng":sl, "ƒê∆°n gi√°":gia, "Th√†nh ti·ªÅn": sl*gia });
    renderLines();
  };
  $("#btn-clear-lines").onclick = () => { state.orderLines=[]; renderLines(); };

  function addPaymentRow(amount=0, note="") {
    state.payments.push({ amount:Number(amount)||0, note:String(note)||"" });
    renderPayments();
  }
  function removePaymentRow(i){ state.payments.splice(i,1); renderPayments(); }
  function paymentsSum(){ return (state.payments||[]).reduce((s,p)=> s + Number(p.amount||0), 0); }
  $("#btn-add-pay").onclick = () => addPaymentRow();

  function renderPayments(){
    const wrap = $("#pay-rows");
    if (!state.payments.length) { wrap.innerHTML = `<div class="muted">Ch∆∞a c√≥ d√≤ng thanh to√°n</div>`; updateTotals(); return; }
    wrap.innerHTML = state.payments.map((p,idx)=>`
      <div class="row" data-pay="${idx}">
        <div class="col"><input type="number" min="0" value="${p.amount}" placeholder="S·ªë ti·ªÅn (VND)"></div>
        <div class="col" style="display:flex;gap:8px">
          <input value="${p.note||""}" placeholder="Ghi ch√∫ (ti·ªÅn m·∫∑t/chuy·ªÉn kho·∫£n/...)">
          <button class="danger" data-del="${idx}">X√≥a</button>
        </div>
      </div>
    `).join("");

    $$("#pay-rows [data-pay]").forEach(row=>{
      const idx = Number(row.dataset.pay);
      const inputs = $$("input", row);
      inputs[0].oninput = e => { state.payments[idx].amount = Number(e.target.value||0); updateTotals(); };
      inputs[1].oninput = e => { state.payments[idx].note   = e.target.value; };
    });
    $$("#pay-rows [data-del]").forEach(btn=>{
      btn.onclick = () => removePaymentRow(Number(btn.dataset.del));
    });
    updateTotals();
  }

  $("#btn-save-order").onclick = async () => {
    const khach = $("#dh-khach").value.trim();
    const ngay  = $("#dh-ngay").value.trim();
    const note  = $("#dh-note").value.trim();
    if (!khach || !ngay || !state.orderLines.length) return;

    const total = state.orderLines.reduce((s,x)=>s+x["Th√†nh ti·ªÅn"],0);
    const paid  = paymentsSum();
    const debt_after = oldDebt + total - paid;

    const details = state.orderLines.map(x=>({ ten:x["T√™n"], so_luong:x["S·ªë l∆∞·ª£ng"], don_gia:x["ƒê∆°n gi√°"] }));
    const payments = state.payments.map(p=> ({ so_tien:Number(p.amount||0), ghi_chu:p.note||"" }));

    const rs = await safePost({
      action: "createOrder",
      order: { khach, ngay, total, paid, debt_before: oldDebt, debt_after, note },
      details, payments
    });
    alert(rs.ok ? `ƒê√£ l∆∞u ${rs.ma_don}` : "ƒê√£ l∆∞u ch·ªù (offline)");
    state.orderLines=[]; state.payments=[]; oldDebt=0; $("#dh-khach").value=""; $("#dh-note").value="";
    renderLines(); renderPayments();
  };

  function updateTotals() {
    const sum = state.orderLines.reduce((s,x)=>s+x["Th√†nh ti·ªÅn"],0);
    const paid = paymentsSum();
    const debt_after = oldDebt + sum - paid;
    $("#dh-sum").textContent = fmtVND(sum);
    $("#dh-old-debt").textContent = fmtVND(oldDebt);
    $("#dh-paid-show").textContent = fmtVND(paid);
    $("#dh-debt-after").textContent = fmtVND(debt_after);
  }
  function renderLines() {
    if (!state.orderLines.length) {
      $("#dh-lines").innerHTML = "Ch∆∞a c√≥ d√≤ng";
      $("#btn-save-order").disabled = true;
      updateTotals(); return;
    }
    $("#dh-lines").innerHTML = renderTableArray(["T√™n","S·ªë l∆∞·ª£ng","ƒê∆°n gi√°","Th√†nh ti·ªÅn"], state.orderLines);
    $("#btn-save-order").disabled = false;
    updateTotals();
  }
  renderLines();
  renderPayments();
}

/* ---- Orders view (t√°ch Hƒê, hi·ªÉn th·ªã payments & N·ª£ c≈©) ---- */
async function pageOrdersView() {
  toggleShell(false);

  appEl().innerHTML = `
    <div class="card">
      <h2>üìö Qu·∫£n l√Ω ƒë∆°n h√†ng</h2>
      <div class="list-head">
        <input class="search" id="od-search" placeholder="T√¨m theo m√£ ƒë∆°n/kh√°ch">
        <button id="od-reload">üîÑ Refresh</button>
      </div>
    </div>
    <div class="card"><div id="od-table">ƒêang t·∫£i...</div></div>
    <div class="card"><h3>üëÅÔ∏è Chi ti·∫øt h√≥a ƒë∆°n</h3><div id="od-detail">Ch·ªçn 1 h√≥a ƒë∆°n ƒë·ªÉ xem.</div></div>
  `;

  $("#od-reload").onclick = async () => { await loadOrders(true); render(); };
  $("#od-search").oninput = () => render();

  await loadOrders(); render();

  function render() {
    const q = ($("#od-search").value || "").toLowerCase();
    const data = q ? state.orders.filter(o =>
      (o.ma||"").toLowerCase().includes(q) || (o.khach||"").toLowerCase().includes(q)
    ) : state.orders;

    let html = `<table><thead><tr>
      <th>M√£ ƒë∆°n</th><th>Kh√°ch h√†ng</th><th>Ng√†y</th>
      <th class="right">N·ª£ c≈©</th><th class="right">T·ªïng</th><th class="right">Kh√°ch tr·∫£</th><th class="right">C√≤n n·ª£</th><th></th>
    </tr></thead><tbody>`;
    data.forEach(o => {
      html += `<tr>
        <td>${o.ma}</td><td>${o.khach}</td><td>${o.ngay}</td>
        <td class="right">${fmtVND(o.nocu)}</td>
        <td class="right">${fmtVND(o.tong)}</td>
        <td class="right">${fmtVND(o.paid)}</td>
        <td class="right">${fmtVND(o.debt_after)}</td>
        <td><button data-view="${o.ma}">Chi ti·∫øt</button></td>
      </tr>`;
    });
    html += `</tbody></table>`;
    $("#od-table").innerHTML = html;

    $$("#od-table [data-view]").forEach(btn=>{
      btn.onclick = async () => {
        const ma = btn.getAttribute("data-view");
        const o = state.orders.find(x=>x.ma===ma);
        const detail = await loadOrderDetails(ma);
        const pays = await loadPaymentsByOrder(ma);
        if (!detail.length) { $("#od-detail").innerHTML = "Kh√¥ng c√≥ chi ti·∫øt."; return; }

        const rows = detail.map(d=>{
          const tt = d.thanh_tien>0 ? d.thanh_tien : (d.so_luong * d.don_gia);
          return {
            "T√™n s·∫£n ph·∫©m": d.ten,
            "S·ªë l∆∞·ª£ng": d.so_luong,
            "ƒê∆°n gi√°": fmtVND(d.don_gia),
            "Th√†nh ti·ªÅn": fmtVND(tt),
          };
        });
        const total = detail.reduce((s, x) => s + (x.thanh_tien>0 ? x.thanh_tien : x.so_luong*x.don_gia), 0);

        $("#od-detail").innerHTML =
          `<div class="muted">M√£ ƒë∆°n: <b>${o.ma}</b> ‚Äî Ng√†y: ${o.ngay} ‚Äî Kh√°ch: <b>${o.khach}</b></div>` +
          `<div class="grid2" style="display:grid;grid-template-columns:1fr 1fr;gap:12px;margin-top:8px">` +
            `<div>`+
              `<h4>H√†ng h√≥a</h4>`+
              renderTableArray(["T√™n s·∫£n ph·∫©m","S·ªë l∆∞·ª£ng","ƒê∆°n gi√°","Th√†nh ti·ªÅn"], rows) +
              `<div class="right" style="margin-top:6px;font-weight:700">T·ªïng: ${fmtVND(total)}</div>`+
            `</div>`+
            `<div>`+
              `<h4>Thanh to√°n c·ªßa h√≥a ƒë∆°n</h4>`+
              renderTableArray(["S·ªë ti·ªÅn","Ghi ch√∫"], pays) +
              `<div class="box" style="margin-top:8px">
                <div>üß∑ N·ª£ c≈©: <b>${fmtVND(o.nocu)}</b></div>
                <div>üíµ Kh√°ch tr·∫£: <b>${fmtVND(o.paid)}</b></div>
                <div>üßæ C√≤n n·ª£ sau Hƒê: <b>${fmtVND(o.debt_after)}</b></div>
                <div>üìù Ghi ch√∫: ${o.note||"‚Äî"}</div>
              </div>`+
            `</div>`+
          `</div>`;
      };
    });
  }
}

/* ---- (Optional) placeholders ƒë·ªÉ menu kh√¥ng b√°o l·ªói) ---- */
async function pageSuppliers(){ toggleShell(false); appEl().innerHTML = `<div class="card"><h2>üè≠ Nh√† cung c·∫•p</h2><div class="muted">ƒêang ph√°t tri·ªÉn‚Ä¶</div></div>`; }
async function pageCategories(){ toggleShell(false); appEl().innerHTML = `<div class="card"><h2>üóÇ Danh m·ª•c</h2><div class="muted">ƒêang ph√°t tri·ªÉn‚Ä¶</div></div>`; }
async function pageReports(){ toggleShell(false); appEl().innerHTML = `<div class="card"><h2>üìä B√°o c√°o</h2><div class="muted">ƒêang ph√°t tri·ªÉn‚Ä¶</div></div>`; }
async function pageManufacturing(){ toggleShell(false); appEl().innerHTML = `<div class="card"><h2>üßµ S·∫£n xu·∫•t</h2><div class="muted">Gi·ªØ nh∆∞ b·∫£n tr∆∞·ªõc.</div></div>`; }
async function pageTimesheet(){ toggleShell(false); appEl().innerHTML = `<div class="card"><h2>üìù Ch·∫•m c√¥ng</h2><div class="muted">Gi·ªØ nh∆∞ b·∫£n tr∆∞·ªõc.</div></div>`; }
async function pagePayroll(){ toggleShell(false); appEl().innerHTML = `<div class="card"><h2>üí∞ T√≠nh l∆∞∆°ng</h2><div class="muted">Gi·ªØ nh∆∞ b·∫£n tr∆∞·ªõc.</div></div>`; }

/* =============== ROUTER =============== */
function setActive(page) { $$(".menu-item,[data-page]").forEach(el=>{ if (el.dataset?.page) el.classList.toggle("active", el.dataset.page===page); }); }
async function loadPage(page) {
  setActive(page);
  if (page==="overview")     { toggleShell(true);  return pageOverview(); }
  toggleShell(false);
  if (page==="customers")     return pageCustomers();
  if (page==="suppliers")     return pageSuppliers();
  if (page==="product")       return pageProduct();
  if (page==="categories")    return pageCategories();
  if (page==="inventory")     return pageInventory();
  if (page==="debts")         return pageDebts();
  if (page==="orders_view")   return pageOrdersView();
  if (page==="order")         return pageOrder();
  if (page==="manufacturing") return pageManufacturing();
  if (page==="timesheet")     return pageTimesheet();
  if (page==="payroll")       return pagePayroll();
  if (page==="reports")       return pageReports();
  toggleShell(true); return pageOverview();
}

/* =============== GLOBAL =============== */
document.addEventListener("click", (e)=>{
  const el = e.target.closest("[data-page]"); if (!el) return;
  e.preventDefault(); const page = el.dataset.page; if (page) loadPage(page);
});
window.addEventListener("DOMContentLoaded", ()=>{
  if (!$("#app")) { const m=document.createElement("main"); m.id="app"; document.body.appendChild(m); }
  toggleShell(true); loadPage("overview");
});
